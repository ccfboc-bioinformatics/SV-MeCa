//ToDo
// update tardis last chr
// include max ressources 
// include config for alignment
// include profiles for differents environments
// change enable makdup to enable tardis markdup

params {
    // Input type "bam/vcf", Default "bam"
    format = "bam"
    
    // Mandatory general parameters
    sample = ""
    build = "hg38" // hg38 or hg19
    has_chr = false

    // Mandatory parameters for bam input
    input = ""
    reference = ""

    // Mandatory parameters for vcf input
    breakdancer = ""
    delly = ""
    insurveyor = ""
    lumpy = ""
    manta = ""
    pindel = ""
    tardis = ""
    stats = ""

    // Optional parameters
    bed = ""
    
    // Runoptions
    cluster_name = ""
    queues = ""
    queuesize = ""

    //Defaults:

    // TARDIS specific parameters
    if ("${params.build}" == "hg38") {
        if ("${params.has_chr}" == "false") {
            sonic = "$baseDir/data/hg38_sonic_nochr.sonic"
        } else {
            sonic = "$baseDir/data/GRCh38.sonic"
        }  
    }else if ("${params.build}" == "hg19") {
        if ("${params.has_chr}" == "false") {
            sonic = "$baseDir/data/human_g1k_v37.sonic"
        } else {
            //ToDo currently no available sonic file for this case 
            sonic = ""
        }  
        
    }
    containerBind = ""
    enable_markdup = true

    results = "$baseDir/results/${params.sample}"
    model_del = "$baseDir/data/svmeca_del.pkl"
    model_ins = "$baseDir/data/svmeca_ins.pkl"
    myConda = "/opt/conda/envs"
    tardisImage = "$baseDir/bin/tardis_latest.sif"
    pd_multi = true

    
}


profiles{
    standard {
        executor.name = 'local'
    }

    cluster {
        executor {
            name = $params.cluster_name
            queueSize = $params.queuesize
        }
    }
}


process {
    shell = ['/bin/bash', '-Eeuo', 'pipefail']
    queue = "${params.queues}"
    cache = 'lenient'
    // if cluster then clusterOptions ToDo
    
    
    withName: REFERENCE_INDEX {
        conda = "${params.myConda}/samtools"
        cpus = 1
        memory = {4.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '1h'
    }

    withName: INCLUDE_REGIONS {
        conda = "${params.myConda}/samtools"
        cpus = 1
        memory = {4.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '1h'
    }

    withName: BAM_INDEX {
        conda = "${params.myConda}/samtools"
        cpus = 8
        memory = {8.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '1h'
    }
    
    withName: METRICS {
        conda = "${params.myConda}/align"
        cpus = 1
        memory = {4.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '12h'
    }

    withName: BREAKDANCER {
        conda = "${params.myConda}/breakdancer"
        cpus = 1
        memory = {4.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '24h'
    }

    withName: DELLY {
        conda = "${params.myConda}/delly"
        cpus = 1
        memory = {6.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '24h'
    }

    withName: INSURVEYOR {
        conda = "${params.myConda}/insurveyor"
        cpus = 8
        memory = {32.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '24h'
    }

    withName: LUMPY {
        conda = "${params.myConda}/lumpy"
        cpus = 4
        memory = {8.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '24h'
    }

    withName: MANTA {
        conda = "${params.myConda}/manta"
        cpus = {6 * task.attempt}
        memory = {8.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '24h'
    }

    withName: PINDEL_SINGLE {
        conda = "${params.myConda}/pindel"
        cpus = {4 * task.attempt}
        memory = {8.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '24h'
    }
    withName: MERGE_PINDEL_SINGLE {
        conda = "${params.myConda}/samtools"
        cpus = 2
        memory = {4.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '1h'
    }
    withName: TARDIS_PREP {
        conda = "${params.myConda}/samtools"
        cpus = 8
        memory = {8.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '24h'
    }
    
    withName: TARDIS {
        container = "$params.tardisImage"
        containerOptions = "--bind $params.containerBind"
        cpus = 1
        memory = {16.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '24h'
    }
    withName: SURVIVOR_MERGE {
        conda = "${params.myConda}/survivor"
        cpus = 2
        memory = {4.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '24h'
    }
    withName: SCORING {
        conda = "${params.myConda}/survivor"
        cpus = 2
        memory = {4.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '24h'
    }
}

singularity {
    enabled = true 
    autMounts = true
    engineOptions = "-d"
}
trace {
    enabled = true
    file = "${params.results}/trace_${params.sample}.tsv"
    fields = 'task_id, hash, native_id, name, status, attempt, exit, realtime, cpus, %cpu, memory, %mem, rss, vmem, peak_rss, peak_vmem'
    overwrite = true
}
timeline{
    enabled = true
    file = "${params.results}/timeline_${params.sample}.html"
    overwrite = true
}

report {
    enabled = true
    file = "${params.results}/report_${params.sample}.html"
    overwrite = true
}

conda.enabled = true
