//ToDo
// update tardis last chr
// include max ressources 
// include config for alignment
// include profiles for differents environments
// change enable makdup to enable tardis markdup

params {

    // General standard
    sample = ""
    results = "$baseDir/results/${params.sample}"
    model_del = "$baseDir/data/svmeca_del.pkl"
    model_ins = "$baseDir/data/svmeca_ins.pkl"
    myConda = ""
    format = "bam"

    // General Custom
    bed = ""
    input = ""
    reference = ""
    skip_manta = false
    // Breakdancer

    // Delly

    // Lumpy

    // Manta

    // Pindel
    pd_multi = true

    // Tardis
    sonic = ""
    tardisImage = "$baseDir/bin/tardis_latest.img"
    containerBind = ""
    enable_markdup = true
}


executor {
    name = 'slurm'
    queueSize = 12
}

process {
    shell = ['/bin/bash', '-Eeuo', 'pipefail']
	queue = 'smp-rh7,fbz,devel-rh7,fbz-exclusive'
    cache = 'lenient'
    clusterOptions = '--account=rnkouame'
    
    
    
    withName: REFERENCE_INDEX {
        conda = "${params.myConda}/samtools"
        cpus = 1
        memory = {4.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '1h'
    }

    withName: INCLUDE_REGIONS {
        conda = "${params.myConda}/samtools"
        cpus = 1
        memory = {4.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '1h'
    }

    withName: BAM_INDEX {
        conda = "${params.myConda}/samtools"
        cpus = 8
        memory = {8.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '1h'
    }
    
    withName: METRICS {
        conda = "${params.myConda}/align"
        cpus = 1
        memory = {4.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '12h'
    }

    withName: BREAKDANCER {
        conda = "${params.myConda}/breakdancer"
        cpus = 1
        memory = {4.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '24h'
    }

    withName: DELLY {
        conda = "${params.myConda}/delly"
        cpus = 1
        memory = {6.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '24h'
    }

    withName: INSURVEYOR {
        conda = "${params.myConda}/insurveyor"
        cpus = 8
        memory = {32.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '24h'
    }

    withName: LUMPY {
        conda = "${params.myConda}/lumpy"
        cpus = 4
        memory = {8.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '24h'
    }

    withName: MANTA {
        conda = "${params.myConda}/manta"
        cpus = {6 * task.attempt}
        memory = {8.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '24h'
    }

    withName: PINDEL_SINGLE {
        conda = "${params.myConda}/pindel"
        cpus = {4 * task.attempt}
        memory = {8.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '24h'
    }
    withName: MERGE_PINDEL_SINGLE {
        conda = "${params.myConda}/samtools"
        cpus = 2
        memory = {4.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '1h'
    }
    withName: TARDIS_PREP {
        conda = "${params.myConda}/samtools"
        cpus = 8
        memory = {8.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '24h'
    }
    
    withName: TARDIS {
        container = "$params.tardisImage"
        containerOptions = "--bind $params.containerBind"
        cpus = 1
        memory = {16.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '24h'
    }
    withName: SURVIVOR_MERGE {
        conda = "${params.myConda}/survivor"
        cpus = 2
        memory = {4.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '24h'
    }
    withName: SCORING {
        conda = "${params.myConda}/survivor"
        cpus = 2
        memory = {4.GB * task.attempt}
        errorStrategy = 'retry'
        maxRetries = 2
        time = '24h'
    }
}

singularity {
    enabled = true 
    autMounts = true
    engineOptions = "-d"
}
trace {
    enabled = true
    file = "${params.results}/trace_${params.sample}.tsv"
    fields = 'task_id, hash, native_id, name, status, attempt, exit, realtime, cpus, %cpu, memory, %mem, rss, vmem, peak_rss, peak_vmem'
    overwrite = true
}
timeline{
    enabled = true
    file = "${params.results}/timeline_${params.sample}.html"
    overwrite = true
}

report {
    enabled = true
    file = "${params.results}/report_${params.sample}.html"
    overwrite = true
}

conda.enabled = true
